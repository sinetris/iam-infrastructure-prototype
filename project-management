#!/usr/bin/env bash
set -Eeuo pipefail

set -o functrace
function handle_error {
    local retval=$?
    local line=${last_lineno:-$1}
    echo "Failed at ${line}: ${BASH_COMMAND}"
    echo "Trace: " "$@"
    exit "${retval}"
}
if (( ${BASH_VERSION%%.*} <= 3 )) || [[ ${BASH_VERSION%.*} = 4.0 ]]; then
  # shellcheck disable=SC2154
  trap '[[ $FUNCNAME = handle_error ]] || { real_lineno=$LINENO; last_lineno=$real_lineno; }' DEBUG
fi
trap 'handle_error $LINENO ${BASH_LINENO[@]}' ERR

generator_orchestrator=multipass
host_architecture=$(uname -m)
project_name=iam-demo
projects_folder=${HOME}/.local/projects
project_basefolder="${projects_folder:?}/${project_name:?}"
# Paths relative to project root
generated_project_relative_path=generated
project_generator_relative_path="platform/project-script-generator"

project_source_path=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
project_generator_path="${project_source_path:?}/${project_generator_relative_path:?}"
generated_project_path="${project_source_path:?}/${generated_project_relative_path:?}"
valid_architectures=( amd64 x86_64 arm64 aarch64 )
valid_orchestrators=( fake multipass vbox )
all_steps=( generate configure bootstrap wrap-up provision )

: "${NO_COLOR:=0}"
if [[ -z ${NO_COLOR:+notset} ]] || [[ "${NO_COLOR}" == "0" ]]; then
  bold_text=$(tput bold)
  bad_result_text=$(tput setaf 1)
  good_result_text=$(tput setaf 2)
  highlight_text=$(tput setaf 3)
  info_text=$(tput setaf 4)
  gray_text=$(tput setaf 8)
  reset_text=$(tput sgr 0)
  status_success=✅
  status_error=❌
  status_warning=⚠️
  status_info=ℹ️
  status_waiting=💤
  status_action=⚙️
else
  bold_text=''
  bad_result_text=''
  good_result_text=''
  highlight_text=''
  info_text=''
  gray_text=''
  reset_text=''
  status_success='[SUCCESS]'
  status_error='[ERROR]'
  status_warning='[WARNING]'
  status_info='[INFO]'
  status_waiting='[WAITING]'
  status_action='[ACTION]'
fi

check_dependency_version() {
  local app_name=${1:?}
  local required_version=${2:?}
  local current_version=${3:?}
  local lower_version
  lower_version=$(printf '%s\n' "${required_version}" "${current_version}" | sort --version-sort | head -n1)
  if [[ "${required_version}" != "${current_version}" ]] && [[ "${lower_version}" != "${required_version}" ]]; then
    echo "${status_error} '${app_name}' version is '${lower_version}' but need to be at least '${required_version}'" >&2
    exit 1
  fi
}

print_array() {
  if [[ $# -lt 5 ]]; then
    echo "Usage: ${bold_text}print_array <separator> <pre> <post> <array>${reset_text}" >&2
    exit 1
  fi
  local separator="$1"
  local pre="$2"
  local post="$3"
  local first_item="$4"
  shift 4
  local other_items=("$@")
  printf "'%s'" "${pre}${first_item}${post}"
  for item in "${other_items[@]}"; do
    printf "%s'%s'" "${separator}" "${pre}${item}${post}"
  done
}

__list_valid_orchestrators=$(print_array ', ' "${bold_text}" "${reset_text}${gray_text}" "${valid_orchestrators[@]}")
__list_valid_architectures=$(print_array ', ' "${bold_text}" "${reset_text}${gray_text}" "${valid_architectures[@]}")
__list_all_steps=$(print_array ', ' "${bold_text}" "${reset_text}${gray_text}" "${all_steps[@]}")
__usage=$(
	cat <<-HELPMSG
		${highlight_text}Usage:${reset_text} ${bold_text}$0 [OPTIONS]${reset_text}

		${highlight_text}${bold_text}Manage the creation, provisioning, and deletion of instances.${reset_text}

		${highlight_text}Options:${reset_text}
		  -a, --all                           ${gray_text}Run all tasks required to setup the project${reset_text}
		                                      ${gray_text}  (in order: ${__list_all_steps})${reset_text}
		  -o, --orchestrator=<name>           ${gray_text}Select orchestrator for project scripts generator${reset_text}
		                                      ${gray_text}  Default: ${bold_text}${generator_orchestrator}${reset_text}
		                                      ${gray_text}  Valid orchestrators: ${__list_valid_orchestrators}${reset_text}
		  -m, --machine-architecture=<arch>   ${gray_text}Host architecture
		                                      ${gray_text}  Default: ${bold_text}${host_architecture}${reset_text} ${gray_text}(using 'uname -m')${reset_text}
		                                      ${gray_text}  Valid architectures: ${__list_valid_architectures}${reset_text}
		  -g, --generate                      ${gray_text}Generate project management scripts${reset_text}
		  -c, --configure                     ${gray_text}Generate project configuration${reset_text}
		  -b, --bootstrap                     ${gray_text}Bootstrap project network and instances${reset_text}
		  -w, --wrap-up                       ${gray_text}Wrap-up project basic setup and create instances base snapshot${reset_text}
		  -p, --provision                     ${gray_text}Provision instances${reset_text}
		  -r, --restore-snapshots             ${gray_text}Restore instances base snapshot${reset_text}
		  -d, --delete                        ${gray_text}Delete instances and related volumes${reset_text}
		      --purge                         ${gray_text}Delete local project data and generated scripts${reset_text}
		      --verbose                       ${gray_text}Produces more detailed informations in output${reset_text}
		  -h, --help                          ${gray_text}This help${reset_text}
		${highlight_text}Environment variables:${reset_text}
		  NO_COLOR                    ${gray_text}Suppress colorized output and the use of emoji${reset_text}
		  INSTANCE_ADMIN_PASSWORD     ${gray_text}Set password for instances administrator user (plain text)${reset_text}
	HELPMSG
)

element_is_in_array() {
  if [[ $# -lt 2 ]]; then
    echo "Usage: ${bold_text}element_is_in_array <element> <array>${reset_text}" >&2
    exit 1
  fi
  local seeking="$1"
  shift
  local elements=("$@")
  for element in "${elements[@]}"; do
    if [[ "${element}" == "${seeking}" ]]; then
      # Found
      return 0
    fi
  done
  # Not found
  return 1
}

usage() {
  echo -e "${__usage}"
}

if [[ $# -lt 1 ]]; then
  usage
  exit 1
fi

check_dependency() {
  if ! command -v "$1" ; then
    echo -e "${bad_result_text}Error: ${bold_text}$1${reset_text}${bad_result_text} is not installed.${reset_text}" >&2
    exit 1
  fi
}

generate_admin_password_hash_file() {
  local instance_admin_password_path="${generated_project_path:?}/assets/passwords/admin"
  # Password in plain text
  local instance_admin_password_file="${instance_admin_password_path:?}/plain"
  if [[ -f "${instance_admin_password_file:?}" ]]; then
    echo " ${status_info} Using existing admin password."
  else
    mkdir -p "$(dirname "${instance_admin_password_file:?}")"
    # Use existing variable INSTANCE_ADMIN_PASSWORD or ask for a new password
    if [[ -z ${INSTANCE_ADMIN_PASSWORD:+notset} ]]; then
      local _password_retry=5
      local _password_min_length=8
      local _password_ok=false

      while [[ ${_password_retry} -ge 0 ]]; do
        read -r -s -p "Choose instances admin password: " INSTANCE_ADMIN_PASSWORD
        echo
        if [[ ${#INSTANCE_ADMIN_PASSWORD} -lt ${_password_min_length} ]]; then
          echo "Password too short! The minimum length is ${_password_min_length} characters."
        else
          read -r -s -p "Repeat instances admin password: " INSTANCE_ADMIN_PASSWORD_REPEAT
          echo
          if [[ "${INSTANCE_ADMIN_PASSWORD}" == "${INSTANCE_ADMIN_PASSWORD_REPEAT}" ]]; then
            _password_ok=true
            break
          else
            echo "You have entered different passwords."
          fi
        fi
        echo "Please try again (attempts left: ${_password_retry})."
        ((_password_retry--))
      done
      if ! ${_password_ok}; then
        echo "No valid instances admin password has been entered (the program will exit)." >&2
        exit 1
      fi
    fi
    echo "${INSTANCE_ADMIN_PASSWORD:?}" > "${instance_admin_password_file}"
  fi
  # Password salt (used to create password hash)
  local instance_admin_password_salt_file="${instance_admin_password_path:?}/salt"
  if [[ -f "${instance_admin_password_salt_file:?}" ]]; then
    echo " ${status_info} Using existing admin password salt."
  else
    check_dependency 'openssl'
    echo " ${status_action} Generating admin password salt file ..."
    mkdir -p "$(dirname "${instance_admin_password_salt_file:?}")"
    openssl rand -base64 8 > "${instance_admin_password_salt_file:?}"
    echo " ${status_success} admin password salt generated."
  fi
  # Password hash
  local instance_admin_password_hash_file="${instance_admin_password_path:?}/hash"
  if [[ -f "${instance_admin_password_hash_file:?}" ]]; then
    echo " ${status_info} Using existing admin password hash."
  else
    check_dependency 'openssl'
    echo " ${status_action} Generating admin password hash file ..."
    mkdir -p "$(dirname "${instance_admin_password_hash_file:?}")"
    local _instance_admin_password
    _instance_admin_password=$(cat "${instance_admin_password_file:?}")
    local _instance_admin_password_salt
    _instance_admin_password_salt=$(cat "${instance_admin_password_salt_file:?}")
    openssl passwd -6 -salt "${_instance_admin_password_salt}" "${_instance_admin_password}" \
      > "${instance_admin_password_hash_file:?}"
    echo " ${status_success} admin password hash file generated."
  fi
}

generate_ansible_ssh_keys() {
  ansible_ssh_key_file="${generated_project_relative_path:?}/assets/.ssh/id_ed25519"
  if [[ -f "${project_source_path:?}/${ansible_ssh_key_file:?}" ]]; then
    echo " ${status_info} Using existing SSH keys for ansible."
  else
    check_dependency 'ssh-keygen'
    echo " ${status_action} Generating SSH keys for ansible ..."
    mkdir -p "$(dirname "${project_source_path:?}/${ansible_ssh_key_file:?}")"
    ssh-keygen -t ed25519 -C "automator@iam-demo.test" -f "${project_source_path:?}/${ansible_ssh_key_file:?}" -q -N ""
    echo " ${status_success} SSH keys for ansible generated."
  fi
}

generate_bootstrap_scripts() {
  check_dependency 'jsonnet'
  local required_version="v0.21.0"
  local current_version
  current_version=$(jsonnet --version | grep -E -o 'v[0-9.]+$')
  check_dependency_version 'jsonnet' "${required_version}" "${current_version}"
  project_config_file="${project_generator_relative_path:?}/config/config.libsonnet"
  if [[ -f "${project_source_path:?}/${project_config_file:?}" ]]; then
    echo " ${status_info} Using existing project config '${bold_text}${project_config_file:?}${reset_text}'"
  else
    echo " ${status_info} Missing config.libsonnet"
    echo " ${status_action} Copying config.libsonnet.${generator_orchestrator:?}.example to '${project_config_file:?}'"
    cp "${project_generator_path:?}/config/config.libsonnet.${generator_orchestrator:?}.example" \
      "${project_source_path:?}/${project_config_file:?}"
  fi
  echo " ${status_info} Using orchestrator: ${bold_text}${generator_orchestrator}${reset_text}"
  echo " ${status_info} Using host_architecture: ${bold_text}${host_architecture}${reset_text}"
  _max_trace=2
  if ${verbose}; then
    _max_trace=0
  fi
  jsonnet --string \
    --max-trace "${_max_trace}" \
    --create-output-dirs \
    --multi "${generated_project_path}" \
    --ext-str project_name="${project_name}" \
    --ext-str project_basefolder="${project_basefolder}" \
    --ext-str project_source_path="${project_source_path}" \
    --ext-str orchestrator_name="${generator_orchestrator}" \
    --ext-str host_architecture="${host_architecture}" \
    --jpath "${project_source_path}" \
    --jpath "${project_generator_path}" \
    --jpath "${project_generator_path}/config" \
    "${project_generator_path}/project-files-generator.jsonnet"
  chmod u+x "${generated_project_path}"/*.sh
}

project_configure() {
  cd "${generated_project_path}"
  ./project-prepare-config.sh
}

project_bootstrap() {
  cd "${generated_project_path}"
  ./project-bootstrap.sh
}

instances_wrap_up() {
  cd "${generated_project_path}"
  ./project-wrap-up.sh
}

project_provisioning() {
  cd "${generated_project_path}"
  ./project-provisioning.sh
}

project_restore_snapshots() {
  cd "${generated_project_path}"
  ./project-restore-snapshots.sh
}

instances_delete() {
  if [[ -d "${generated_project_path}" ]]; then
    cd "${generated_project_path}"
    ./project-delete.sh
  else
    echo "${status_info} ${info_text}Generated project path not found.'${reset_text}"
  fi
}

purge_generated() {
  echo "${status_info} ${info_text}Purging project data and generated scripts'${reset_text}"
  echo "  ${status_info} ${info_text}Deleting '${project_basefolder:?}'${reset_text}"
  rm -rfv "${project_basefolder:?}"
  echo "  ${status_info} ${info_text}Deleting '${generated_project_path:?}'${reset_text}"
  rm -rfv "${generated_project_path:?}"
}

configure=false
bootstrap=false
generate=false
provision=false
wrap_up=false
delete=false
purge=false
verbose=false
restore_snapshots=false
while [[ $# -gt 0 ]] && [[ "$1" != "" ]]; do
  case $1 in
    -a | --all)
      shift
      generate=true
      configure=true
      bootstrap=true
      wrap_up=true
      provision=true
      ;;
    -o | --orchestrator)
      generator_orchestrator="${2?Missing argument for  -o | --orchestrator}"
      shift
      shift
      ;;
    -m | --machine-architecture)
      host_architecture="${2?Missing argument for  -m | --machine-architecture}"
      shift
      shift
      ;;
    -g | --generate)
      shift
      generate=true
      ;;
    -c | --configure)
      shift
      configure=true
      ;;
    -b | --bootstrap)
      shift
      bootstrap=true
      ;;
    -w | --wrap-up)
      shift
      wrap_up=true
      ;;
    -p | --provision)
      shift
      provision=true
      ;;
    -r | --restore-snapshots)
      shift
      restore_snapshots=true
      ;;
    -d | --delete)
      shift
      delete=true
      ;;
    --purge)
      shift
      purge=true
      ;;
    --verbose)
      shift
      verbose=true
      ;;
    -h | --help)
      shift
      usage
      exit 0
      ;;
    *)
      printf "${bad_result_text}Unexpected argument: ${bold_text}%s${reset_text}\n" "$1" >&2
      usage
      exit 1
      ;;
  esac
done

# shellcheck disable=SC2310
if ! element_is_in_array "${host_architecture}" "${valid_architectures[@]}"; then
  echo "${status_error} ${bad_result_text}Error: 'host_architecture' must be one of: ${bold_text}${valid_architectures[*]}${reset_text}" >&2
  exit 1
fi

# shellcheck disable=SC2310
if ! element_is_in_array "${generator_orchestrator}" "${valid_orchestrators[@]}"; then
  echo "${status_error} ${bad_result_text}Error: 'orchestrator' must be one of: ${bold_text}${valid_orchestrators[*]}${reset_text}" >&2
  exit 1
fi

if ${delete} && ${bootstrap} && ! (${generate} && ${configure}); then
  echo "${status_error}${bad_result_text} Calling 'bootstrap' after 'delete' without calling first 'generate' and 'configure'.${reset_text}" >&2
  exit 1
fi

if ${delete}; then
  instances_delete
  if ${purge}; then
    purge_generated
  fi
fi

if ${generate}; then
  echo "${status_info}${bold_text}${highlight_text} - Generating project management scripts ... - ${reset_text}"
  generate_admin_password_hash_file
  generate_ansible_ssh_keys
  generate_bootstrap_scripts
  echo "${status_success}${bold_text}${good_result_text} - Project management scripts generated - ${reset_text}"
fi
if ${configure}; then
  echo "${status_info}${bold_text}${highlight_text} - Preparing project configuration ... - ${reset_text}"
  project_configure
  echo "${status_success}${bold_text}${good_result_text} - Project configuration done - ${reset_text}"
fi
if ${bootstrap}; then
  echo "${status_info}${bold_text}${highlight_text} - Starting project network and instances creation ... (might take some time ${status_waiting}) - ${reset_text}"
  project_bootstrap
  echo "${status_success}${bold_text}${good_result_text} - Project network and instances creation done - ${reset_text}"
fi
if ${wrap_up}; then
  echo "${status_info}${bold_text}${highlight_text} - Running project wrap-up ... - ${reset_text}"
  instances_wrap_up
  echo "${status_success}${bold_text}${good_result_text} - Project wrap-up done - ${reset_text}"
fi
if ${provision}; then
  echo "${status_info}${bold_text}${highlight_text} - Starting project instances provisioning ... - ${reset_text}"
  project_provisioning
  echo "${status_success}${bold_text}${good_result_text} - Project instances provisioning done - ${reset_text}"
fi
if ${restore_snapshots}; then
  echo "${status_info}${bold_text}${highlight_text} - Starting project instances snapshot restore ... - ${reset_text}"
  echo " ${status_warning}${highlight_text} The current instance state will be discarded. ${reset_text}"
  project_restore_snapshots
  echo "${status_success}${bold_text}${good_result_text} - Project instances snapshot restore done - ${reset_text}"
fi

echo "${status_success}${bold_text}${highlight_text} - All done - ${reset_text}"
echo
echo " ${highlight_text}Project root path: ${bold_text}${project_source_path}${reset_text}"

if ${bootstrap} || ${wrap_up} || ${provision}; then
  echo
  echo "${info_text}To ssh into an instance use ${bold_text}./instance-shell.sh <instance-name>${reset_text}${info_text} from the generated folder.${reset_text}"
  echo "  ${highlight_text}Example:${reset_text}"
  echo "  ${bold_text}cd ${generated_project_path}${reset_text}"
  echo "  ${bold_text}./instance-shell.sh ansible-controller${reset_text}"
fi
